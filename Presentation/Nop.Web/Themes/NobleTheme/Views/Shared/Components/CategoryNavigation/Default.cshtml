@model CategoryNavigationModel

@functions {
    bool BreadCrumbContainsCurrentCategoryId(CategorySimpleModel category)
    {
        if (Model.CurrentCategoryId == 0)
            return false;

        if (category.Id == Model.CurrentCategoryId)
            return true;

        foreach (var subCategory in category.SubCategories)
        {
            if (BreadCrumbContainsCurrentCategoryId(subCategory))
            {
                return true;
            }
        }

        return false;
    }

    async Task CategoryLine(CategoryNavigationModel.CategoryLineModel lineModel)
    {
        var active = lineModel.Category.Id == lineModel.CurrentCategoryId || lineModel.Category.SubCategories.Count(BreadCrumbContainsCurrentCategoryId) > 0;
        var last = lineModel.Category.Id == lineModel.CurrentCategoryId;
        var liClass = active ? "active" : "inactive";

        if (active)
        {
            liClass += " last";
        }

        <li class="@liClass">
            <a href="@Url.RouteUrl("Category", new { SeName = lineModel.Category.SeName })" id="parent">
                @lineModel.Category.Name
                @if (lineModel.Category.NumberOfProducts.HasValue)
                {
                    <text> </text>

                    @T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)
                }
            </a>
            @{
                if (lineModel.Category.Id == lineModel.CurrentCategoryId ||
                lineModel.Category.SubCategories.Count(BreadCrumbContainsCurrentCategoryId) > 0 || lineModel.Category.PartGroups.Count > 0)
                {
                    if (lineModel.Category.SubCategories.Count > 0 || lineModel.Category.PartGroups.Count > 0)
                    {
                        <ul class="sublist">
                            @foreach (var partGroup in lineModel.Category.PartGroups.DistinctBy(x=>x.Id).ToList())
                            {
                                var categoryLineModel = new CategoryNavigationModel.CategoryLineModel
                                    {
                                        CurrentCategoryId = lineModel.CurrentCategoryId,
                                        Category = lineModel.Category,
                                        PartGroup = partGroup,
                                        ActivePartGroups = lineModel.CurrentCategoryId == lineModel.Category.Id
                                    };
                                await PartGroupLine(categoryLineModel);
                            }
                        </ul>
                    }
                }
            }
        </li>
    }

    async Task PartGroupLine(CategoryNavigationModel.CategoryLineModel lineModel)
    {
        var style = "display:none";
        if (lineModel.ActivePartGroups)
        {
            style = "";
        }

        <li class="" id="child" style="@style">
            <a href="@Url.RouteUrl("PartGroup", new { SeName =  @lineModel.PartGroup.SeName })">
                @lineModel.PartGroup.Name
            </a>
            @{
                if (lineModel.Category.Id == lineModel.CurrentCategoryId ||
                lineModel.Category.SubCategories.Count(BreadCrumbContainsCurrentCategoryId) > 0 || lineModel.Category.PartGroups.Count > 0)
                {
                    if (lineModel.Category.SubCategories.Count > 0 || lineModel.Category.PartGroups.Count > 0)
                    {
                        <ul class="part-group">
                            @foreach (var partGroup in lineModel.Category.PartGroups.DistinctBy(x=>x.Id).ToList())
                            {
                                var categoryLineModel = new CategoryNavigationModel.CategoryLineModel
                                    {
                                        CurrentPartGroupId = lineModel.CurrentPartGroupId,
                                        PartGroup = partGroup,
                                    };
                            }
                        </ul>
                    }
                }
            }
        </li>
    }
}
@if (Model.Categories.Count > 0)
{
    <div class="block block-category-navigation well box-shadow-wrapper">
        <div class="title main-title">
            <strong>@T("Categories")</strong>
        </div>
        <div class="listbox">
            <ul class="nav nav-list">
                @foreach (var category in Model.Categories)
                {
                    var categoryLineModel = new CategoryNavigationModel.CategoryLineModel
                    {
                        CurrentCategoryId = Model.CurrentCategoryId,
                        Category = category,
                        //PartGroups = category.PartGroups
                    };
                    await CategoryLine(categoryLineModel);
                }
            </ul>
        </div>
    </div>
}
