@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}


<div class="product-item clearfix" style="margin-bottom:10px">
    <div class="row" style="margin-top:20px">
        <div class="col-lg-3">
            <h3 class="product-title">
                <a link="@Model.c2cUrl" href="@Model.c2cUrl" target="_blank">@Model.ShortDescription</a>
            </h3>
            <div class="sku">
                @*Manufacturer Name:  @Model.manufacturerName
                Manufacturer Code:  @Model.manufacturerCode*@
                @Model.Sku

            </div>
        </div>
        <div class="col-lg-2">
            <div class="picture">
                <div class="picture-thumbs">
                    @if (string.IsNullOrWhiteSpace(Model.imageUrl))
                    {
                        @*<img class="lazyOwl" alt="@Model.genericDescription" data-src="@Model.imageUrl" src="http://localhost:65283/images/thumbs/default-image_100.png" title="@Model.genericDescription" />*@
                         <img class="lazyOwl" alt="@Model.DefaultPictureModel.AlternateText" data-src="@Model.DefaultPictureModel.ImageUrl" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
                    }
                    else
                    {
                        <img class="lazyOwl" alt="@Model.DefaultPictureModel.AlternateText" data-src="@Model.DefaultPictureModel.ImageUrl" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-2">
            <div class="card">
                <div class="card-body" style="border: 1px solid #efdddd;border-radius: 5px;background-color: #cfc2c2;text-align: center;color: black;">
                    <p>@Model.partTypeId</p>
                    <p>Year: @Model.years</p>

                </div>
            </div>
        </div>

        <div class="col-lg-2">
            <div class="prices">
                @if (Model.unitCost > 0)
                {
                    <span class="price actual-price">@Model.unitCost</span>
                }
                else
                {
                    <span class="price actual-price">0.00</span>
                }
            </div>
        </div>
        <div class="col-lg-1">
            @*@Model.availableQuantity*@
        </div>
        <div class="col-lg-2">
            @if (!Model.ProductPrice.DisableBuyButton)
            {
                var addToCartText = T("ShoppingCart.AddToCart").Text;
                if (Model.ProductPrice.IsRental)
                {
                    addToCartText = T("ShoppingCart.Rent").Text;
                }
                if (Model.ProductPrice.AvailableForPreOrder)
                {
                    addToCartText = T("ShoppingCart.PreOrder").Text;
                }

                    <button class="btn btn-primary btn-sm" onclick="AjaxCart.addproducttocart_catalog('@Url.RouteUrl("AddProductToCart-Catalog", new {genericDescription = Model.ShortDescription,catShortDescription = Model.ShortDescription,catLongDescription = Model.FullDescription,partNumber = Model.Sku,availableQuantity = Model.availableQuantity,displayQuantity = Model.displayQuantity,unitCost = Model.unitCost,imageUrl = Model.imageUrl, apiProductId = Model.ApiProductId, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity })');return false;"><i class="fa fa-shopping-cart"></i></button>
            }
            @*<button class="btn btn-primary btn-sm" onclick="AjaxCart.addproducttocart_catalog('@Url.RouteUrl("AddProductToCart-Catalog", new {genericDescription = Model.ShortDescription,catShortDescription = Model.ShortDescription,catLongDescription = Model.FullDescription,partNumber = Model.partNumber,availableQuantity = Model.availableQuantity,displayQuantity = Model.displayQuantity,unitCost = price,imageUrl = Model.imageUrl, apiProductId = Model.id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity })');return false;"><i class="fa fa-shopping-cart"></i></button>*@
            @*<button type="button" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@Url.RouteUrl("AddProductToCart-Catalog", new { apiProductId = Model.id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity })');return false;">@(T("ShoppingCart.AddToCart").Text)</button>*@

            @*<button type="button" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;">@(addToCartText)</button>*@
        </div>
    </div>
</div>




@*<div class="product-item clearfix" data-productid="@Model.Id">
    <div class="picture">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img class="lazyOwl" alt="@Model.DefaultPictureModel.AlternateText" data-src="@Model.DefaultPictureModel.ImageUrl" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
    </div>
    <div class="caption">
        <div class="details">
            <h3 class="product-title">
                <a href="@(string.IsNullOrWhiteSpace(Model.c2cUrl) ? Url.RouteUrl("Product", new {SeName = Model.SeName}) : Model.c2cUrl)" target="_blank">@Model.Name</a>
            </h3>
            @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
            {
                <div class="sku">
                    @Model.Sku
                </div>
            }
            <div class="product-border-bottom"></div>
            <div class="description">
                @Html.Raw(Model.ShortDescription)
            </div>
            <div class="add-info">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
                <div class="buttons">
                    @if (!Model.ProductPrice.DisableBuyButton)
                    {
                        var addToCartText = T("ShoppingCart.AddToCart").Text;
                        if (Model.ProductPrice.IsRental)
                        {
                            addToCartText = T("ShoppingCart.Rent").Text;
                        }
                        if (Model.ProductPrice.AvailableForPreOrder)
                        {
                            addToCartText = T("ShoppingCart.PreOrder").Text;
                        }
                        <div class="product-addtocart-wrapper">
                            <button type="button" data-toggle="tooltip" data-placement="top" title="Add to Cart" class="btn btn-primary product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@Url.RouteUrl("AddProductToCart-Catalog", new {genericDescription = Model.ShortDescription,catShortDescription = Model.ShortDescription,catLongDescription = Model.ShortDescription,partNumber = Model.Sku,availableQuantity = Model.availableQuantity,displayQuantity = Model.displayQuantity,unitCost = Model.unitCost,imageUrl = Model.imageUrl, apiProductId = Model.ApiProductId, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity })');return false;">@(addToCartText)</button>
                        </div>
                    }
                    <div class="prices">
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                        {
                            <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                        }
                        <span class="price actual-price">@Model.ProductPrice.Price</span>
                        @if (Model.ProductPrice.DisplayTaxShippingInfo)
                        {
                            var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                            //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                            //of course, you can modify appropriate locales to include VAT info there
                            <span class="tax-shipping-info">
                                @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeNameAsync("shippinginfo") }))
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                        {
                            <div class="base-price-pangv">
                                @Model.ProductPrice.BasePricePAngV
                            </div>
                        }
                    </div>
                </div>
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
            </div>
        </div>
    </div>
</div>*@

